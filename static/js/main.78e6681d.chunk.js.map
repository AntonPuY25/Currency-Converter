{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","redux/selectors/selectors.ts","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","lessons/lesson1/lesson1.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","onClick","data-action","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","ChangeActionAC","CHANGE_CHANGE_ACTION","getAllSelectors","state","CurrencyEContainer","dispatch","_useDispatch","as","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","ChangeCurrentCurrencyAC","Lesson1","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78e6681d.chunk.js","sourcesContent":["import {useDispatch as _useDispatch} from 'react-redux';\r\n\r\nexport enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = ReturnType <typeof ChangeCurrencyFieldAC >\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string) => {\r\n   return {\r\n       type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n       amountOfBYN,\r\n       amountOfCurrency\r\n   } as const\r\n};\r\n\r\nexport type ChangeAction = ReturnType<typeof ChangeActionAC>;\r\n\r\n\r\nexport const ChangeActionAC = (isBuying: boolean) => {\r\n    return {\r\n        type:ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n        isBuying\r\n    } as const\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = ReturnType<typeof ChangeCurrentCurrencyAC>;\r\n\r\n\r\nexport const ChangeCurrentCurrencyAC = (currentCurrency: string) => {\r\n    return {\r\n        type:ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        currentCurrency\r\n    } as const\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;\r\n\r\nexport const useDispatch = ()=>{\r\n    const dispatch = _useDispatch();\r\n    return (as:CurrencyReducersTypes)=> dispatch(as)\r\n}","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                                  currenciesName,\r\n                                                                                  currentCurrency,\r\n                                                                                  currencyRate,\r\n                                                                                  isBuying,\r\n                                                                                  amountOfBYN,\r\n                                                                                  amountOfCurrency,\r\n                                                                                  changeCurrencyField,\r\n                                                                                  changeAction,\r\n                                                                                  changeCurrentCurrency,\r\n                                                                              }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import {IGlobalState} from \"../state\";\r\n\r\n\r\n\r\n\r\nexport const getAllSelectors = (state: IGlobalState) => state.currency\r\n","import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyType} from '../../redux/currencyReducer';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    ChangeCurrentCurrencyAC, useDispatch\r\n} from '../../redux/actions';\r\nimport { useSelector} from \"react-redux\";\r\nimport {\r\n    getAllSelectors,\r\n\r\n} from \"../../redux/selectors/selectors\";\r\n\r\nconst CurrencyEContainer: React.FC = () => {\r\nconst dispatch= useDispatch()\r\n\r\n    const {currencies,currentCurrency,isBuying,amountOfBYN,amountOfCurrency}= useSelector(getAllSelectors)\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default CurrencyEContainer;\r\n\r\n","import React from 'react';\nimport CurrencyExchangeContainer from '../../containers/CurrencyExchangeContainer/CurrencyEContainer'\n\n// Redux\n// https://tproger.ru/translations/redux-for-beginners/\n// https://monsterlessons.com/project/series/redux-js-dlya-nachinayushih\n// https://xsltdev.ru/react/redux/intro/\n\n// Typescript genetic\n// https://habr.com/ru/post/455473/\n// https://habr.com/ru/company/ruvds/blog/426729/\n\n// Typescript from zero + typescript generic (English video)\n// https://www.youtube.com/watch?v=3d9XqFmCmQw\n\n// Container component\n// https://habr.com/ru/company/ruvds/blog/446206/\n\n// Dispatch\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\n\nconst Lesson1: React.FunctionComponent = () => {\n    return (\n    <React.Fragment>\n        <CurrencyExchangeContainer />\n    </React.Fragment>\n  );\n};\n\nexport default Lesson1;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport Lesson1 from './lessons/lesson1/lesson1';\r\n// import './lessons/lesson2/lesson2';\r\n// import Lesson3 from './lessons/lesson3/Lesson3';\r\n// import Lesson4 from './lessons/lesson4/Lesson4';\r\n// import './lessons/lesson5/lesson5';\r\n// import './lessons/lesson6/lesson6';\r\n// import './lessons/lesson7/lesson7';\r\n// import './lessons/lesson8/lesson8';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Lesson1 />\r\n            {/*<Lesson3 />*/}\r\n            {/*<Lesson4 />*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:{\r\n            return{\r\n                ...state,\r\n                amountOfBYN:action.amountOfBYN,\r\n                amountOfCurrency:action.amountOfCurrency\r\n\r\n            }\r\n        }\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:{\r\n            return{\r\n                ...state,\r\n                currentCurrency:action.currentCurrency,\r\n                amountOfBYN:\"\",\r\n                amountOfCurrency:\"\",\r\n\r\n            }\r\n        }\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:{\r\n            return{\r\n                ...state,\r\n                isBuying:action.isBuying,\r\n                amountOfBYN:\"\",\r\n                amountOfCurrency:\"\",\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}